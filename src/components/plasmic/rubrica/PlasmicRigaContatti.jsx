// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hDnb1e9HU6FSLTm6gTNrXy
// Component: 2OfHUDT1yAk
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_rubrica.module.css"; // plasmic-import: hDnb1e9HU6FSLTm6gTNrXy/projectcss
import sty from "./PlasmicRigaContatti.module.css"; // plasmic-import: 2OfHUDT1yAk/css
import UsersvgIcon from "./icons/PlasmicIcon__Usersvg"; // plasmic-import: J7WCCLHpj8Ajhn/icon

export const PlasmicRigaContatti__VariantProps = new Array();

export const PlasmicRigaContatti__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicRigaContatti__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <div
      data-plasmic-name={"contatti"}
      data-plasmic-override={overrides.contatti}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.contatti
      )}
    >
      <div className={classNames(projectcss.all, sty.column__xEXeo)}>
        <div className={classNames(projectcss.all, sty.freeBox__bqGpY)}>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__yu25)}>
              <UsersvgIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zGvBe
                )}
              >
                {" Nome"}
              </div>
            </div>
          ) : null}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.column__dlFfv)}>
        <div className={classNames(projectcss.all, sty.freeBox__acNna)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__nCgHb
            )}
          >
            {"contatto"}
          </div>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.column__gKren)}>
        <div className={classNames(projectcss.all, sty.freeBox__jaesE)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__iQupi
            )}
          >
            {"Indirizzo"}
          </div>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.column__vuSv3)}>
        <div className={classNames(projectcss.all, sty.freeBox___4G8G)}>
          <a
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link
            )}
            href={"https://www.plasmic.app/"}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#000000" }}
              >
                {"Eventuale sito"}
              </span>
            </React.Fragment>
          </a>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.column__x4AIj)}>
        <div className={classNames(projectcss.all, sty.freeBox__yfNmZ)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__anDng
            )}
          >
            {"Note"}
          </div>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  contatti: ["contatti", "svg", "link"],
  svg: ["svg"],
  link: ["link"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRigaContatti__ArgProps,
          internalVariantPropNames: PlasmicRigaContatti__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicRigaContatti__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "contatti") {
    func.displayName = "PlasmicRigaContatti";
  } else {
    func.displayName = `PlasmicRigaContatti.${nodeName}`;
  }
  return func;
}

export const PlasmicRigaContatti = Object.assign(
  // Top-level PlasmicRigaContatti renders the root element
  makeNodeComponent("contatti"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicRigaContatti
    internalVariantProps: PlasmicRigaContatti__VariantProps,
    internalArgProps: PlasmicRigaContatti__ArgProps
  }
);

export default PlasmicRigaContatti;
/* prettier-ignore-end */
